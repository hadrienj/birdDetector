{"version":3,"sources":["PredPlot.js","Spectrogram.js","SimpleReactFileUpload.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["PredPlot","props","data","y","this","type","mode","marker","color","rangemode","layout","xaxis","range","length","showgrid","yaxis","width","window","innerWidth","height","autosize","margin","l","r","b","t","pad","divId","Component","Spectrogram","state","loading","colors","colormap","nshades","format","wavesurfer","WaveSurfer","create","container","pixelRatio","scrollParent","normalize","autoCenter","barHeight","backend","waveColor","partialRender","plugins","SpectrogramPlugin","colorMap","load","audioPath","err","console","log","prevProps","isPlaying","playPause","isLoaded","waveformElement","document","getElementById","removeChild","firstChild","onFileLoaded","SimpleReactFileUpload","file","onFormSubmit","bind","onChange","fileUpload","e","preventDefault","onGetFilename","name","setState","target","files","formData","FormData","append","axios","post","process","headers","then","response","onGetData","onSubmit","React","Main","filename","handleData","handleFilename","handleFileLoaded","className","App","handleKeyDown","addEventListener","event","key","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TA+CeA,E,YA1Cb,WAAYC,GAAQ,qEACZA,I,sEAIN,OACE,kBAAC,IAAD,CACEC,KAAM,CACJ,CACEC,EAAGC,KAAKH,MAAMC,KACdG,KAAM,UACNC,KAAM,QACNC,OAAQ,CAAEC,MAAO,WACjBC,UAAW,gBAGfC,OAAQ,CACNC,MAAO,CACLC,MAAO,CAAC,EAAGR,KAAKH,MAAMC,KAAKW,QAC3BC,UAAU,GAEZC,MAAO,CACLH,MAAO,CAAC,EAAG,GACXE,UAAU,GAEZE,MAAOC,OAAOC,WACdC,OAAQ,IACRC,UAAU,EACVC,OAAQ,CACNC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,IAAK,IAGTC,MAAM,oB,GArCSC,a,iDCmHRC,E,YAhHd,WAAY5B,GAAQ,IAAD,uBAClB,4CAAMA,KAED6B,MAAQ,CACZC,SAAS,GAGV,EAAKC,OAASC,IAAS,CACnBA,SAAU,MACVC,QAAS,IACTC,OAAQ,UAGZ,EAAKC,WAAaC,IAAWC,OAAO,CACnCC,UAAW,YACXpB,OAAQ,IACRqB,WAAY,EACZC,cAAc,EACdC,WAAW,EACXC,YAAY,EACZC,UAAW,EACXC,QAAS,WASTC,UAAW,UACXC,eAAe,EACfC,QAAS,CACRC,IAAkBX,OAAO,CACxBF,WAAY,EAAKA,WACjBG,UAAW,eACXC,WAAY,EACZU,SAAU,EAAKlB,YAKlB,IACC,EAAKI,WAAWe,KAAK,EAAKlD,MAAMmD,WAC/B,MAAOC,GACRC,QAAQC,IAAI,MAAOF,GA7CF,S,gFAiDAG,GAIlB,GAHIA,EAAUC,YAAcrD,KAAKH,MAAMwD,WACtCrD,KAAKgC,WAAWsB,YAEbF,EAAUG,WAAavD,KAAKH,MAAM0D,SAAU,CAG/C,IAAMC,EAAkBC,SAASC,eAAe,YAChDF,EAAgBG,YAAYH,EAAgBI,YAE5C5D,KAAKgC,WAAaC,IAAWC,OAAO,CACnCC,UAAW,YACXpB,OAAQ,IACRqB,WAAY,EACZC,cAAc,EACdC,WAAW,EACXC,YAAY,EACZC,UAAW,EACXC,QAAS,WASTC,UAAW,UACXC,eAAe,EACfC,QAAS,CACRC,IAAkBX,OAAO,CACxBF,WAAYhC,KAAKgC,WACjBG,UAAW,eACXC,WAAY,EACZU,SAAU9C,KAAK4B,YAIlB,IACC5B,KAAKgC,WAAWe,KAAK/C,KAAKH,MAAMmD,WAChChD,KAAKH,MAAMgE,cAAa,GACvB,MAAOZ,GACRC,QAAQC,IAAI,MAAOF,O,+BAiBrB,OAAO,yC,GA7GiBzB,a,iBC6CXsC,E,YA7Cb,WAAYjE,GAAQ,IAAD,8BACjB,4CAAMA,KACD6B,MAAQ,CACXqC,KAAM,MAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAPD,E,0EASNG,GACXA,EAAEC,iBACFrE,KAAKH,MAAMyE,cAActE,KAAK0B,MAAMqC,KAAKQ,MACzCvE,KAAKmE,WAAWnE,KAAK0B,MAAMqC,Q,+BAEpBK,GACPpE,KAAKwE,SAAS,CAAET,KAAMK,EAAEK,OAAOC,MAAM,O,iCAE5BX,GAAO,IAAD,OAETY,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQd,GAMxB,OAAOe,IAAMC,KARDC,gDAQWL,EALR,CACbM,QAAS,CACP,eAAgB,eAGqBC,MAAK,SAAAC,GAI5C,OAHAjC,QAAQC,IAAIgC,GACZ,EAAKtF,MAAMuF,UAAUD,EAASrF,MAC9B,EAAKD,MAAMgE,cAAa,GACjBsB,O,+BAKT,OACE,0BAAME,SAAUrF,KAAKgE,cACnB,2CACA,2BAAO/D,KAAK,OAAOiE,SAAUlE,KAAKkE,WAClC,4BAAQjE,KAAK,UAAb,e,GAxC4BqF,IAAM9D,WCgF3B+D,E,YA3Eb,WAAY1F,GAAQ,IAAD,8BACjB,4CAAMA,KACD6B,MAAQ,CACXC,SAAS,EACT7B,KAAM,GACN0F,SAAS,YACTjC,UAAU,GAEZ,EAAKkC,WAAa,EAAKA,WAAWxB,KAAhB,gBAClB,EAAKyB,eAAiB,EAAKA,eAAezB,KAApB,gBACtB,EAAK0B,iBAAmB,EAAKA,iBAAiB1B,KAAtB,gBAVP,E,wEAaRnE,GACTE,KAAKwE,SAAS,CAAE1E,W,qCAGH0F,GACbxF,KAAKwE,SAAS,CAAEgB,e,uCAGDjC,GACfvD,KAAKwE,SAAS,CAAEjB,e,+BAiDhB,OA7CAL,QAAQC,IAAR,8BAAmC6B,kDAE/BhF,KAAK0B,MAAMC,QAEX,yBAAKiE,UAAU,WACb,kBAAC,IAAD,CAAc3F,KAAK,OAAOG,MAAM,UAAUW,OAAQ,GAAIH,MAAO,MAQ/D,uCAIAZ,KAAK0B,MAAM8D,SAEX,6BACE,kBAAC,EAAD,CACEJ,UAAWpF,KAAKyF,WAChBnB,cAAetE,KAAK0F,eACpB7B,aAAc7D,KAAK2F,mBAErB,kBAAC,EAAD,CACE3C,UAAS,UAAKgC,gDAAL,mBAAiDhF,KAAK0B,MAAM8D,UACrEnC,UAAWrD,KAAKH,MAAMwD,UACtBE,SAAUvD,KAAK0B,MAAM6B,SACrBM,aAAc7D,KAAK2F,mBAErB,kBAAC,EAAD,CAAU7F,KAAME,KAAK0B,MAAM5B,QAK7B,6BACE,kBAAC,EAAD,CACEsF,UAAWpF,KAAKyF,WAChBnB,cAAetE,KAAK0F,iBAEtB,kBAAC,EAAD,CAAU5F,KAAME,KAAK0B,MAAM5B,Y,GApElB0B,aCuBJqE,E,YAzBd,WAAYhG,GAAQ,IAAD,8BAClB,4CAAMA,KACD6B,MAAQ,CACZ2B,WAAW,GAEZ,EAAKyC,cAAgB,EAAKA,cAAc7B,KAAnB,gBACrBR,SAASsC,iBAAiB,UAAW,EAAKD,eAAe,GANvC,E,2EASLE,GACK,MAAdA,EAAMC,MACTD,EAAM3B,iBACNrE,KAAKwE,SAAS,CAACnB,WAAYrD,KAAK0B,MAAM2B,e,+BAKvC,OACC,yBAAKuC,UAAU,OACd,kBAAC,EAAD,CAAMvC,UAAWrD,KAAK0B,MAAM2B,iB,GApBd7B,aCME0E,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9C,SAASC,eAAe,SD2H3C,kBAAmB8C,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.606d3865.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport Plot from \"react-plotly.js\";\n\nclass PredPlot extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Plot\n        data={[\n          {\n            y: this.props.data,\n            type: \"scatter\",\n            mode: \"lines\",\n            marker: { color: \"#2EBCE7\" },\n            rangemode: \"nonnegative\",\n          }\n        ]}\n        layout={{\n          xaxis: {\n            range: [0, this.props.data.length],\n            showgrid: false,\n          },\n          yaxis: {\n            range: [0, 1],\n            showgrid: false,\n          },\n          width: window.innerWidth,\n          height: 200,\n          autosize: false,\n          margin: {\n            l: 0,\n            r: 0,\n            b: 0,\n            t: 0,\n            pad: 0\n          },\n        }}\n        divId=\"spectrogram\"\n      />\n    );\n  }\n}\n\nexport default PredPlot;\n","import React, { Component } from \"react\";\n\nimport WaveSurfer from \"wavesurfer.js\";\nimport SpectrogramPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.spectrogram.min.js\";\nimport colormap from \"colormap\"\n\nclass Spectrogram extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tloading: true\n\t\t};\n\n\t\tthis.colors = colormap({\n\t\t    colormap: 'hot',\n\t\t    nshades: 256,\n\t\t    format: 'float'\n\t\t});\n\n\t\tthis.wavesurfer = WaveSurfer.create({\n\t\t\tcontainer: \"#waveform\",\n\t\t\theight: 100,\n\t\t\tpixelRatio: 2,\n\t\t\tscrollParent: true,\n\t\t\tnormalize: false,\n\t\t\tautoCenter: false,\n\t\t\tbarHeight: 2,\n\t\t\tbackend: \"WebAudio\",\n\t\t\t// xhr: {\n\t\t\t//   requestHeaders: [\n\t\t\t//     {\n\t\t\t//       key: \"Authorization\",\n\t\t\t//       value: await getAuthHeader()\n\t\t\t//     }\n\t\t\t//   ]\n\t\t\t// },\n\t\t\twaveColor: \"#2EBCE7\",\n\t\t\tpartialRender: true,\n\t\t\tplugins: [\n\t\t\t\tSpectrogramPlugin.create({\n\t\t\t\t\twavesurfer: this.wavesurfer,\n\t\t\t\t\tcontainer: \"#spectrogram\",\n\t\t\t\t\tpixelRatio: 2,\n\t\t\t\t\tcolorMap: this.colors,\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\n\t\ttry {\n\t\t\tthis.wavesurfer.load(this.props.audioPath);\n\t\t} catch (err) {\n\t\t\tconsole.log(\"err\", err);\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.isPlaying !== this.props.isPlaying) {\n\t\t\tthis.wavesurfer.playPause();\n\t\t}\n\t\tif (prevProps.isLoaded !== this.props.isLoaded) {\n\n\t\t\t// Remove previous wave\n\t\t\tconst waveformElement = document.getElementById('waveform')\n\t\t\twaveformElement.removeChild(waveformElement.firstChild);\n\n\t\t\tthis.wavesurfer = WaveSurfer.create({\n\t\t\t\tcontainer: \"#waveform\",\n\t\t\t\theight: 100,\n\t\t\t\tpixelRatio: 2,\n\t\t\t\tscrollParent: true,\n\t\t\t\tnormalize: false,\n\t\t\t\tautoCenter: false,\n\t\t\t\tbarHeight: 2,\n\t\t\t\tbackend: \"WebAudio\",\n\t\t\t\t// xhr: {\n\t\t\t\t//   requestHeaders: [\n\t\t\t\t//     {\n\t\t\t\t//       key: \"Authorization\",\n\t\t\t\t//       value: await getAuthHeader()\n\t\t\t\t//     }\n\t\t\t\t//   ]\n\t\t\t\t// },\n\t\t\t\twaveColor: \"#2EBCE7\",\n\t\t\t\tpartialRender: true,\n\t\t\t\tplugins: [\n\t\t\t\t\tSpectrogramPlugin.create({\n\t\t\t\t\t\twavesurfer: this.wavesurfer,\n\t\t\t\t\t\tcontainer: \"#spectrogram\",\n\t\t\t\t\t\tpixelRatio: 2,\n\t\t\t\t\t\tcolorMap: this.colors,\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tthis.wavesurfer.load(this.props.audioPath);\n\t\t\t\tthis.props.onFileLoaded(false);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(\"err\", err);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\t// wavesurfer.zoom(200);\n\n\t\t// wavesurfer.on(\"ready\", () => {\n\t\t//   this.setState({ loading: false });\n\t\t// });\n\n\t\t// wavesurfer.on(\"error\", (err) => {\n\t\t//   this.setState({ loading: false });\n\t\t//   console.log(\"err\", err);\n\t\t// });\n\n\t\treturn <div>asdf</div>;\n\t}\n}\n\nexport default Spectrogram;\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport Button from '@material-ui/core/Button';\n\nclass SimpleReactFileUpload extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null\n    };\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.fileUpload = this.fileUpload.bind(this);\n  }\n  onFormSubmit(e) {\n    e.preventDefault(); // Stop form submit\n    this.props.onGetFilename(this.state.file.name);\n    this.fileUpload(this.state.file);\n  }\n  onChange(e) {\n    this.setState({ file: e.target.files[0] });\n  }\n  fileUpload(file) {\n    const url = process.env.REACT_APP_BACKEND_URL;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const config = {\n      headers: {\n        \"content-type\": \"audio/wav\"\n      }\n    };\n    return axios.post(url, formData, config).then(response => {\n      console.log(response);\n      this.props.onGetData(response.data);\n      this.props.onFileLoaded(true);\n      return response;\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <h1>File Upload</h1>\n        <input type=\"file\" onChange={this.onChange} />\n        <button type=\"submit\">Upload</button>\n      </form>\n    );\n  }\n}\n\nexport default SimpleReactFileUpload;\n","import React, { Component } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport PredPlot from \"./PredPlot\";\nimport Spectrogram from \"./Spectrogram\";\n\nimport SimpleReactFileUpload from \"./SimpleReactFileUpload\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      data: [],\n      filename: `bird1.wav`,\n      isLoaded: false,\n    };\n    this.handleData = this.handleData.bind(this);\n    this.handleFilename = this.handleFilename.bind(this);\n    this.handleFileLoaded = this.handleFileLoaded.bind(this);\n  }\n\n  handleData(data) {\n    this.setState({ data });\n  }\n\n  handleFilename(filename) {\n    this.setState({ filename });\n  }\n\n  handleFileLoaded(isLoaded) {\n    this.setState({ isLoaded });\n  }\n\n  render() {\n    console.log(`=================== ${process.env.REACT_APP_BACKEND_URL}`)\n    let elements;\n    if (this.state.loading) {\n      elements = (\n        <div className=\"loading\">\n          <ReactLoading type=\"spin\" color=\"#2eaa26\" height={30} width={30} />\n        </div>\n      );\n      // elements = (\n      //   <div>Loading1...</div>\n      // )\n    } else {\n      elements = (\n        <div> asdf </div>\n        // <PredPlot />\n      );\n    }\n    if (this.state.filename) {\n      elements = (\n        <div>\n          <SimpleReactFileUpload\n            onGetData={this.handleData}\n            onGetFilename={this.handleFilename}\n            onFileLoaded={this.handleFileLoaded}\n          />\n          <Spectrogram\n            audioPath={`${process.env.REACT_APP_BACKEND_URL}/static/${this.state.filename}`}\n            isPlaying={this.props.isPlaying}\n            isLoaded={this.state.isLoaded}\n            onFileLoaded={this.handleFileLoaded}\n          />\n          <PredPlot data={this.state.data} />\n        </div>\n      );\n    } else {\n      elements = (\n        <div>\n          <SimpleReactFileUpload\n            onGetData={this.handleData}\n            onGetFilename={this.handleFilename}\n          />\n          <PredPlot data={this.state.data} />\n        </div>\n      );\n    }\n    return elements;\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport Main from \"./Main\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisPlaying: false\n\t\t};\n\t\tthis.handleKeyDown = this.handleKeyDown.bind(this);\n\t\tdocument.addEventListener(\"keydown\", this.handleKeyDown, false);\n\t}\n\n\thandleKeyDown(event) {\n\t\tif (event.key === \" \") {\n\t\t\tevent.preventDefault();\n\t\t\tthis.setState({isPlaying: !this.state.isPlaying});\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Main isPlaying={this.state.isPlaying} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}